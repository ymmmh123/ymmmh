"use strict";

var canvas;
var gl;

var theta = 0.0;
var thetaLoc;
var direction = 1;
var delay = 50;
			var points=[];
			var dushu = 0;

function changeDir(){
	direction *= -1;
}

function initRotSquare(){
	canvas = document.getElementById( "rot-canvas" );
	gl = WebGLUtils.setupWebGL( canvas, "experimental-webgl" );
	if( !gl ){
		alert( "WebGL isn't available" );
	}

	gl.viewport( 0, 0, canvas.width, canvas.height );
	gl.clearColor( 1.0, 1.0, 1.0, 1.0 );

	var program = initShaders( gl, "vertex-shader", "fragment-shader" );
	gl.useProgram( program );

	var vertices = [
		-0.08715574274765817,0.9961946980917455,0,
		-0.17364817766693033,0.984807753012208,0,
		-0.25881904510252074,0.9659258262890683,0,
		-0.3420201433256687,0.9396926207859084,0,
		-0.42261826174069944,0.9063077870366499,0,
		-0.49999999999999994,0.8660254037844387,0,
		-0.573576436351046,0.8191520442889918,0,
		-0.6427876096865393,0.766044443118978,0,
		-0.7071067811865475,0.7071067811865476,0,
		-0.766044443118978,0.6427876096865394,0,
		-0.8191520442889918,0.573576436351046,0,
		-0.8660254037844386,0.5000000000000001,0,
		-0.9063077870366498,0.4226182617406996,0,
		-0.9396926207859083,0.34202014332566905,0,
		-0.9659258262890682,0.2588190451025212,0,
		-0.984807753012208,0.17364817766693086,0,
		-0.9961946980917454,0.08715574274765879,0,
		-1,7.273661547324616e-16,0,
		-0.9961946980917457,-0.08715574274765735,0,
		-0.9848077530122082,-0.17364817766692944,0,
		-0.9659258262890685,-0.25881904510251974,0,
		-0.9396926207859088,-0.34202014332566766,0,
		-0.9063077870366504,-0.4226182617406985,0,
		-0.8660254037844392,-0.49999999999999906,0,
		-0.8191520442889925,-0.573576436351045,0,
		-0.7660444431189789,-0.6427876096865384,0,
		-0.7071067811865486,-0.7071067811865466,0,
		-0.6427876096865405,-0.766044443118977,0,
		-0.5735764363510474,-0.8191520442889909,0,
		-0.5000000000000016,-0.8660254037844378,0,
		-0.4226182617407011,-0.9063077870366492,0,
		-0.34202014332567054,-0.9396926207859078,0,
		-0.25881904510252274,-0.9659258262890678,0,
		-0.17364817766693247,-0.9848077530122077,0,
		-0.0871557427476604,-0.9961946980917453,0,
		-2.3429107291650482e-15,-1,0,
		0.08715574274765574,-0.9961946980917458,0,
		0.17364817766692783,-0.9848077530122085,0,
		0.2588190451025182,-0.965925826289069,0,
		0.34202014332566616,-0.9396926207859093,0,
		0.42261826174069683,-0.9063077870366512,0,
		0.49999999999999745,-0.8660254037844402,0,
		0.5735764363510436,-0.8191520442889936,0,
		0.6427876096865369,-0.76604444311898,0,
		0.7071067811865452,-0.7071067811865499,0,
		0.7660444431189761,-0.6427876096865416,0,
		0.81915204428899,-0.5735764363510486,0,
		0.866025403784437,-0.5000000000000027,0,
		0.9063077870366486,-0.4226182617407024,0,
		0.9396926207859072,-0.3420201433256719,0,
		0.9659258262890674,-0.25881904510252407,0,
		0.9848077530122075,-0.17364817766693383,0,
		0.9961946980917452,-0.08715574274766179,0,
		1,-3.736410698672604e-15,0,
		0.9961946980917459,0.08715574274765435,0,
		0.9848077530122088,0.17364817766692647,0,
		0.9659258262890693,0.25881904510251685,0,
		0.9396926207859098,0.3420201433256648,0,
		0.9063077870366517,0.4226182617406956,0,
		0.8660254037844408,0.4999999999999962,0,
		0.8191520442889944,0.5735764363510425,0,
		0.766044443118981,0.6427876096865358,0,
		0.7071067811865508,0.7071067811865442,0,
		0.642787609686543,0.766044443118975,0,
		0.57357643635105,0.819152044288989,0,
		0.5000000000000043,0.8660254037844362,0,
		0.42261826174070405,0.9063077870366478,0,
		0.3420201433256736,0.9396926207859067,0,
		0.25881904510252585,0.9659258262890669,0,
		0.17364817766693563,0.9848077530122071,0,
		0.08715574274766362,0.9961946980917451,0,
		5.573999878030222e-15,1,0,


		-0.5,0.5,0,
		-0.15,0.5,0,
		0.15,0.5,0,
		0.5,0.5,0,

		-0.3,0.3,0,
		-0.15,0.15,0,
		-0.15,0.15,0,
		0,0.3,0,
		0,0.3,0,
		0.15,0.15,0,
		0.15,0.15,0,
		0.3,0.3,0
	];
		
	var colors = [
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,
		0.0 , 0.0 , 1.0 , 1.0,//tou
		1.0 , 0.0 , 0.0 , 1.0,
		1.0 , 0.0 , 0.0 , 1.0,
		1.0 , 0.0 , 0.0 , 1.0,
		1.0 , 0.0 , 0.0 , 1.0,//yan
		0.9 , 0.8 , 0.2 , 1.0,
		0.9 , 0.8 , 0.2 , 1.0,
		0.9 , 0.8 , 0.2 , 1.0,
		0.9 , 0.8 , 0.2 , 1.0,
		0.9 , 0.8 , 0.2 , 1.0,
		0.9 , 0.8 , 0.2 , 1.0,
		0.9 , 0.8 , 0.2 , 1.0,
		0.9 , 0.8 , 0.2 , 1.0,
		0.9 , 0.8 , 0.2 , 1.0//zui
	]
	
	

	var bufferId = gl.createBuffer();
	gl.bindBuffer( gl.ARRAY_BUFFER, bufferId );
	gl.bufferData( gl.ARRAY_BUFFER, new Float32Array( vertices ), gl.STATIC_DRAW );

	var vPosition = gl.getAttribLocation( program, "vPosition" );
	gl.vertexAttribPointer( vPosition, 3, gl.FLOAT, false, 0, 0 );
	gl.enableVertexAttribArray( vPosition );
	
	var bufferc = gl.createBuffer();
	gl.bindBuffer( gl.ARRAY_BUFFER, bufferc );
	gl.bufferData( gl.ARRAY_BUFFER, new Float32Array( colors ), gl.DYNAMIC_DRAW );
	
	//将外部着色器变量与数据缓冲区关联
	var cPosition = gl.getAttribLocation( program, "cPosition" );
	gl.vertexAttribPointer( cPosition, 4, gl.FLOAT, false, 0, 0 );
	gl.enableVertexAttribArray( cPosition );

	thetaLoc = gl.getUniformLocation( program, "theta" );

	document.getElementById( "controls" ).onclick = function( event ){
		switch( event.target.index ){
			case 0:
				direction *= -1;
				break;
			case 1:
				delay /= 2.0;
				break;
			case 2:
				delay *= 2.0;
				break;	
		}
	};
	window.onkeydown = function( event ) {
		var key = String.fromCharCode(event.keyCode);
		switch( key ) {
		  case '1':
			direction *= -1;
			break;
		  case '2':
			delay /= 2.0;
			break;
		  case '3':
			delay *= 2.0;
			break;
		}
	};
	
	document.getElementById( "speedcon" ).onchange = function( event ){
		delay = 100 - event.target.value;
	}
	
	renderSquare();

}


function renderSquare(){
	gl.clear( gl.COLOR_BUFFER_BIT );
	
	// set uniform values
	theta += direction * 0.1;
	if( theta > 2 * Math.PI )
		theta -= (2 * Math.PI);
	else if( theta < -2 * Math.PI )
		theta += ( 2 * Math.PI );

	gl.uniform1f( thetaLoc, theta );

	gl.drawArrays( gl.LINE_LOOP, 0, 72 );
	
	gl.drawArrays( gl.LINES,72,84);

	// update and render
	setTimeout( function (){ requestAnimFrame( renderSquare ); }, delay );
}
